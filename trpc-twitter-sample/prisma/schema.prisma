generator client {
    provider = "prisma-client-js"
}
datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}
model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@unique([provider, providerAccountId])
}
model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    tweets        Tweet[]
    tweetLikes    TweetLike[]
    following     UserFollow[] @relation("UserFollowsUser")
    followers     UserFollow[] @relation("UserFollowsTarget")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime
    @@unique([identifier, token])
}

model Tweet {
    id        String      @id @default(uuid())
    from      User        @relation(fields: [userId], references: [id])
    userId    String
    content   String
    likes     TweetLike[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @default(now()) @updatedAt
}

model TweetLike {
    id        String   @id @default(uuid())
    tweet     Tweet    @relation(fields: [tweetId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    tweetId   String
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model UserFollow {
    id        String   @id @default(uuid())
    user      User     @relation("UserFollowsUser", fields: [userId], references: [id])
    userId    String
    target    User     @relation("UserFollowsTarget", fields: [targetId], references: [id])
    targetId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}